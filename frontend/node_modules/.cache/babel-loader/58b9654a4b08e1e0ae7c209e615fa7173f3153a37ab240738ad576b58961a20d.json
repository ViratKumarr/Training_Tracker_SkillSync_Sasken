{"ast":null,"code":"import apiClient from './apiClient';\nexport const ProgressService = {\n  getAllProgress: async () => {\n    try {\n      const response = await apiClient.get('/progress');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Failed to fetch progress';\n    }\n  },\n  getProgressByUser: async userId => {\n    try {\n      const response = await apiClient.get(`/progress/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Failed to fetch user progress';\n    }\n  },\n  getProgressByCourse: async courseId => {\n    try {\n      const response = await apiClient.get(`/progress/course/${courseId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'Failed to fetch course progress';\n    }\n  },\n  getProgressById: async id => {\n    try {\n      const response = await apiClient.get(`/progress/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || 'Failed to fetch progress';\n    }\n  },\n  createProgress: async progressData => {\n    try {\n      const response = await apiClient.post('/progress', progressData);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'Failed to create progress';\n    }\n  },\n  updateProgress: async (id, progressData) => {\n    try {\n      const response = await apiClient.put(`/progress/${id}`, progressData);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || 'Failed to update progress';\n    }\n  },\n  deleteProgress: async id => {\n    try {\n      const response = await apiClient.delete(`/progress/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || 'Failed to delete progress';\n    }\n  },\n  getUserProgressStats: async userId => {\n    try {\n      const response = await apiClient.get(`/progress/stats/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || 'Failed to fetch user progress stats';\n    }\n  }\n};","map":{"version":3,"names":["apiClient","ProgressService","getAllProgress","response","get","data","error","_error$response","getProgressByUser","userId","_error$response2","getProgressByCourse","courseId","_error$response3","getProgressById","id","_error$response4","createProgress","progressData","post","_error$response5","updateProgress","put","_error$response6","deleteProgress","delete","_error$response7","getUserProgressStats","_error$response8"],"sources":["/Users/azaddayal/Training_Tracker_Skill_Sync/frontend/src/services/ProgressService.js"],"sourcesContent":["import apiClient from './apiClient';\n\nexport const ProgressService = {\n  getAllProgress: async () => {\n    try {\n      const response = await apiClient.get('/progress');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to fetch progress';\n    }\n  },\n\n  getProgressByUser: async (userId) => {\n    try {\n      const response = await apiClient.get(`/progress/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to fetch user progress';\n    }\n  },\n\n  getProgressByCourse: async (courseId) => {\n    try {\n      const response = await apiClient.get(`/progress/course/${courseId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to fetch course progress';\n    }\n  },\n\n  getProgressById: async (id) => {\n    try {\n      const response = await apiClient.get(`/progress/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to fetch progress';\n    }\n  },\n\n  createProgress: async (progressData) => {\n    try {\n      const response = await apiClient.post('/progress', progressData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to create progress';\n    }\n  },\n\n  updateProgress: async (id, progressData) => {\n    try {\n      const response = await apiClient.put(`/progress/${id}`, progressData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to update progress';\n    }\n  },\n\n  deleteProgress: async (id) => {\n    try {\n      const response = await apiClient.delete(`/progress/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to delete progress';\n    }\n  },\n\n  getUserProgressStats: async (userId) => {\n    try {\n      const response = await apiClient.get(`/progress/stats/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || 'Failed to fetch user progress stats';\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}